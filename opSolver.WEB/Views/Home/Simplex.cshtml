@model opSolver.OPS.Methods.Simplex.SData
@{
    ViewBag.Title = lang.Resource.method1;
    var selectedList = new List<bool>() { true, false };

}

<header class="header-simplex">
    <div class="container">
        <div class="row justify-content-center">
            <div class="section-title">
                <h1>@lang.Resource.method1</h1>
            </div>
            <div class="w-100"></div>
            <p>
                @using (Html.BeginForm("SimplexGeneral", "Home", FormMethod.Post))
                {<button type="submit" class="btn btn-outline-primary btn-ops">@lang.Resource.general</button>}
                @using (Html.BeginForm("Simplex1", "Home", FormMethod.Post))
                {<button type="submit" class="btn btn-outline-primary btn-ops">@lang.Resource.condition1</button>}
                @using (Html.BeginForm("Simplex2", "Home", FormMethod.Post))
                {<button type="submit" class="btn btn-outline-primary btn-ops">@lang.Resource.condition2</button>}
                @using (Html.BeginForm("Simplex3", "Home", FormMethod.Post))
                {<button type="submit" class="btn btn-outline-primary btn-ops">@lang.Resource.condition3</button>}
            </p>
            <div class="w-100"></div>
            @using (Html.BeginForm("Simplex", "Home", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                <table class="table table-bordered">
                    <thead class="thead-dark">
                        <tr>
                            <th>x1</th>
                            <th>x2</th>
                            <th>x3</th>
                            <th>x4</th>
                            <th>@lang.Resource.Sign</th>
                            <th>@lang.Resource.fMembers</th>
                        </tr>
                    </thead>
                    <tr>
                        <td>@Html.EditorFor(m => m.dtVariables[0][0], new { htmlAttributes = new { @placeholder = "x1" } })</td>
                        <td>@Html.EditorFor(m => m.dtVariables[0][1], new { htmlAttributes = new { @placeholder = "x2" } })</td>
                        <td>@Html.EditorFor(m => m.dtVariables[0][2], new { htmlAttributes = new { @placeholder = "x3" } })</td>
                        <td>@Html.EditorFor(m => m.dtVariables[0][3], new { htmlAttributes = new { @placeholder = "x4" } })</td>
                        <td>
                            @Html.DropDownListFor(m => m.dtSign[0], new SelectList(new List<string>() { "<=", ">=", "=" }), new { @class = "form-control", style = "margin:5px 0;" })
                        </td>
                        <td>@Html.EditorFor(m => m.dtB[0], new { htmlAttributes = new { @placeholder = "B" } })</td>
                    </tr>
                    <tr>
                        <td>@Html.EditorFor(m => m.dtVariables[1][0], new { htmlAttributes = new { @placeholder = "x1" } })</td>
                        <td>@Html.EditorFor(m => m.dtVariables[1][1], new { htmlAttributes = new { @placeholder = "x2" } })</td>
                        <td>@Html.EditorFor(m => m.dtVariables[1][2], new { htmlAttributes = new { @placeholder = "x3" } })</td>
                        <td>@Html.EditorFor(m => m.dtVariables[1][3], new { htmlAttributes = new { @placeholder = "x4" } })</td>
                        <td>@Html.DropDownListFor(m => m.dtSign[1], new SelectList(new List<string>() { "<=", ">=", "=" }), new { @class = "form-control", style = "margin:5px 0;" })</td>
                        <td>@Html.EditorFor(m => m.dtB[1], new { htmlAttributes = new { @placeholder = "B" } })</td>
                    </tr>
                    <thead class="thead-dark">
                        <tr>
                            <th>x1</th>
                            <th>x2</th>
                            <th>x3</th>
                            <th>x4</th>
                            <th></th>
                            <th>Max?</th>
                        </tr>
                    </thead>
                    <tr>
                        <td>@Html.EditorFor(m => m.dtFunctionVariables[0], new { htmlAttributes = new { @placeholder = "x1" } })</td>
                        <td>@Html.EditorFor(m => m.dtFunctionVariables[1], new { htmlAttributes = new { @placeholder = "x2" } })</td>
                        <td>@Html.EditorFor(m => m.dtFunctionVariables[2], new { htmlAttributes = new { @placeholder = "x3" } })</td>
                        <td>@Html.EditorFor(m => m.dtFunctionVariables[3], new { htmlAttributes = new { @placeholder = "x4" } })</td>
                        <td>-></td>
                        <td>
                            @Html.DropDownListFor(m => m.isMax, new SelectList(selectedList), new { @class = "opSelect" })
                        </td>
                    </tr>

                </table>
                @Html.Hidden("Method", lang.Resource.method1)
                <button class="btn btn-outline-primary btn-ops" type="submit">
                    @lang.Resource.submit
                </button>

            }
           
        </div>
    </div>
    @if (Model != null)
    {
        <div class="text-center">
            <a href="#iter"><i class="fa fa-angle-double-down" style="font-size: 50px;"></i></a>
        </div>
    }
</header>
@if (Model != null)
{
    var kolv = 0;
    <section class="simp">


        <div class="container">
            <div class="row justify-content-center">


                <div class="w-100"></div>
                @foreach (var snap in Model.result.Item1)
                {

                    <h2 id="iter" class="text-center"> @(lang.Resource.Iteration + " " + kolv++)</h2>


                    <table class="table table-bordered">
                        <thead class="thead-dark">
                            <tr>
                                <th>i</th>
                                <th>@lang.Resource.Basis</th>
                                <th>C</th>
                                <th>B</th>
                                @for (int i = 4; i < Model.result.Item1.First().matrix.Length + 4; i++)
                                {
                                    <th>@($"A{i - 3}")</th>
                                }
                            </tr>
                        </thead>
                        @for (int i = 0; i < Model.result.Item1.First().C.Length; i++)
                        {
                            <tr>
                                @for (int j = 0; j < Model.result.Item1.First().matrix.Length + 4; j++)
                                {
                                    if (j == 0)
                                    {
                                        <td>
                                            @((i + 1).ToString())
                                        </td>
                                    }
                                    else if (j == 1)
                                    {
                                        <td>
                                            @($"A{snap.C[i] + 1}")
                                        </td>
                                    }
                                    else if (j == 2)
                                    {
                                        <td>
                                            @(snap.m[snap.C[i]] ? "-M" : $"{snap.fVars[snap.C[i]]}")
                                        </td>
                                    }
                                    else if (j == 3)
                                    {
                                        <td>
                                            @(Math.Round(snap.b[i], 2).ToString())
                                        </td>
                                    }
                                    else
                                    {
                                        <td>
                                            @(Math.Round(snap.matrix[j - 4][i], 2).ToString())
                                        </td>
                                    }
                                }
                            </tr>
                        }


                        <tr>
                            <td>m+1</td>
                            <td>F</td>
                            <td>deltaJ</td>
                            <td>@snap.fValue</td>
                            @for (int i = 4; i < Model.result.Item1.First().matrix.Length + 4; i++)
                            {
                                <td>@Math.Round(snap.F[i - 4], 2)</td>
                            }
                        </tr>


                        @if (!snap.isMDone)
                        {
                            <tr>
                                <td>m+2</td>
                                <td>M</td>
                                <td>deltaJ</td>
                                <td></td>
                                @for (int i = 4; i < Model.result.Item1.First().matrix.Length + 4; i++)
                                {
                                    <td>@Math.Round(snap.M[i - 4])</td>
                                }
                            </tr>
                        }
                        <tr></tr>
                    </table>


                }

                <h2>@lang.Resource.Result</h2>
                <table class="table table-hover text-center">
                    @for (int i = 0; i < Model.result.Item1.Last().C.Length; i++)
                    {
                        <tr>
                            <th>X@( Model.result.Item1.Last().C[i] + 1)</th>
                            <td>@(Math.Round(Model.result.Item1.Last().b[i], 0))</td>
                        </tr>
                    }
                    <tr>
                        <th>@lang.Resource.Result</th>
                        <td>@Model.result.Item1.Last().fValue</td>
                    </tr>

                </table>

            </div>
        </div>

    </section>
}
