<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="additional" xml:space="preserve">
    <value>How will the optimal distribution of production volumes and capital investments change if:
                
                a) due to internal reserves, i-th branch (i = 1 - 4) will reduce the unit cost of production by  5% 
                
                b) at the expense of internal reserves, the i-th branch will reduce the specific capital costs by &lt;span class="orange"&gt; 5% &lt;/span&gt;
                
                c) due to competition in the market, the product will be sold at a price of 100  den. units / pcs?</value>
  </data>
  <data name="additional_terms" xml:space="preserve">
    <value>Additional terms</value>
  </data>
  <data name="app_description" xml:space="preserve">
    <value>The application was developed as a course project on "optimizing design solutions" for finding a solution to optimizing a specific task (described on the main page). Author: Dunko Egor</value>
  </data>
  <data name="branch" xml:space="preserve">
    <value>№ of branch</value>
  </data>
  <data name="condition1" xml:space="preserve">
    <value>Cost price -5%</value>
  </data>
  <data name="condition2" xml:space="preserve">
    <value>Capital expenditures -5%</value>
  </data>
  <data name="condition3" xml:space="preserve">
    <value>Item price 100</value>
  </data>
  <data name="cost" xml:space="preserve">
    <value>Cost, cash units / pcs.</value>
  </data>
  <data name="formulation" xml:space="preserve">
    <value>In the planned period, the production association (PO), consisting of four branches, must ensure production of at least  30  thousand pieces. new products. For mastering the production of this new type of software, software allocates investments in the amount of  2.8  million den. units Each branch has developed its own project for the development of a new product, which is characterized by the values ​​of specific capital costs and cost per unit of production (data in the table). The product is planned to be sold at a price  105 den. unit / piece 
                Under what option of distribution to branches the production volumes and capital investments of software will have the maximum profit?</value>
  </data>
  <data name="form_problem" xml:space="preserve">
    <value>Formulation of the problem</value>
  </data>
  <data name="general" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="indicator" xml:space="preserve">
    <value>Indicator</value>
  </data>
  <data name="int_" xml:space="preserve">
    <value>integer</value>
  </data>
  <data name="limit1" xml:space="preserve">
    <value>limit 1</value>
  </data>
  <data name="limit2" xml:space="preserve">
    <value>limit 2</value>
  </data>
  <data name="limit3" xml:space="preserve">
    <value>limit 3</value>
  </data>
  <data name="login" xml:space="preserve">
    <value>Authorization</value>
  </data>
  <data name="math_model" xml:space="preserve">
    <value>Math model</value>
  </data>
  <data name="method1" xml:space="preserve">
    <value>Method: Simplex</value>
  </data>
  <data name="method1descr" xml:space="preserve">
    <value>The implex method is an iterative process of directionally solving a system of equations step by step, which begins with the reference solution and, in search of the best option, moves along the corner points of the region of feasible solution, improving the value of the objective function until the objective function reaches the optimal value.</value>
  </data>
  <data name="method2" xml:space="preserve">
    <value>Method: Genetic</value>
  </data>
  <data name="method2descr" xml:space="preserve">
    <value>Genetic algorithm (born genetic algorithm) is a heuristic search algorithm used to solve optimization and simulation problems by randomly selecting, combining and varying the desired parameters using mechanisms similar to natural selection in nature. It is a type of evolutionary computation that solves optimization problems using natural evolution methods such as inheritance, mutation, selection, and crossing-over. A distinctive feature of the genetic algorithm is the emphasis on the use of the "crossing" operator, which performs the operation of recombination of candidate solutions, whose role is similar to the role of crossing in living nature.</value>
  </data>
  <data name="register" xml:space="preserve">
    <value>Registration</value>
  </data>
  <data name="submit" xml:space="preserve">
    <value>Submit</value>
  </data>
  <data name="to_solver" xml:space="preserve">
    <value>To Solver</value>
  </data>
  <data name="to_use" xml:space="preserve">
    <value>To use this application you should to log in to your account. Please, do it.</value>
  </data>
  <data name="unit_capital_costs" xml:space="preserve">
    <value>Unit capital costs, cash units / pcs.</value>
  </data>
  <data name="wait" xml:space="preserve">
    <value>Please, wait</value>
  </data>
  <data name="welcome" xml:space="preserve">
    <value>Welcome</value>
  </data>
  <data name="Basis" xml:space="preserve">
    <value>Basis</value>
  </data>
  <data name="fMembers" xml:space="preserve">
    <value>Free members</value>
  </data>
  <data name="Iteration" xml:space="preserve">
    <value>Iteration</value>
  </data>
  <data name="lang" xml:space="preserve">
    <value>EN</value>
  </data>
  <data name="Result" xml:space="preserve">
    <value>Result</value>
  </data>
  <data name="Sign" xml:space="preserve">
    <value>Sign</value>
  </data>
</root>